{
  "name": "local-web-server",
  "version": "1.2.6",
  "description": "A simple web-server for productive front-end development",
  "bin": {
    "ws": "./bin/cli.js"
  },
  "main": "lib/local-web-server.js",
  "license": "MIT",
  "keywords": [
    "dev",
    "server",
    "web",
    "tool",
    "front-end",
    "development",
    "cors",
    "mime",
    "rest"
  ],
  "engines": {
    "node": ">=4.0.0"
  },
  "scripts": {
    "test": "tape test/*.js",
    "docs": "jsdoc2md -t jsdoc2md/README.hbs -p list lib/*.js > README.md; echo",
    "cover": "istanbul cover ./node_modules/.bin/tape test/*.js && cat coverage/lcov.info | coveralls && rm -rf coverage; echo"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/75lb/local-web-server"
  },
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "dependencies": {
    "ansi-escape-sequences": "^2.2.2",
    "array-back": "^1.0.3",
    "command-line-args": "^2.1.6",
    "config-master": "^2.0.2",
    "debug": "^2.2.0",
    "http-proxy": "^1.13.2",
    "kcors": "^1.2.0",
    "koa": "^2.0.0",
    "koa-bodyparser": "^3.0.0",
    "koa-compress": "^1.0.9",
    "koa-conditional-get": "^1.0.3",
    "koa-connect-history-api-fallback": "^0.3.0",
    "koa-convert": "^1.2.0",
    "koa-etag": "^2.1.1",
    "koa-json": "^1.1.3",
    "koa-morgan": "^1.0.1",
    "koa-rewrite": "^2.1.0",
    "koa-route": "^3",
    "koa-send": "^3.2.0",
    "koa-serve-index": "^1.1.1",
    "koa-static": "^2.0.0",
    "path-to-regexp": "^1.2.1",
    "reduce-flatten": "^1.0.0",
    "stream-log-stats": "^1.1.3",
    "string-tools": "^1.0.0",
    "test-value": "^2.0.0",
    "typical": "^2.4.2"
  },
  "devDependencies": {
    "jsdoc-to-markdown": "^1.3.6",
    "req-then": "^0.2.4",
    "tape": "^4.5.1"
  },
  "readme": "[![view on npm](http://img.shields.io/npm/v/local-web-server.svg)](https://www.npmjs.org/package/local-web-server)\n[![npm module downloads](http://img.shields.io/npm/dt/local-web-server.svg)](https://www.npmjs.org/package/local-web-server)\n[![Build Status](https://travis-ci.org/75lb/local-web-server.svg?branch=master)](https://travis-ci.org/75lb/local-web-server)\n[![Dependency Status](https://david-dm.org/75lb/local-web-server.svg)](https://david-dm.org/75lb/local-web-server)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)\n[![Join the chat at https://gitter.im/75lb/local-web-server](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/75lb/local-web-server?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n***Requires node v4.0.0 or higher. Install the [previous release](https://github.com/75lb/local-web-server/tree/prev) for older node support.***\n\n# local-web-server\nA simple web-server for productive front-end development. Typical use cases:\n\n* Front-end Development\n  * Static or Single Page App development\n  * Re-route paths to local or remote resources\n  * Efficient, predictable, entity-tag-powered conditional request handling (no need to 'Disable Cache' in DevTools, slowing page-load down)\n  * Bundle with your front-end project\n  * Very little configuration, just a few options\n  * Outputs a dynamic statistics view to the terminal\n  * Configurable log output, compatible with [Goaccess, Logstalgia and glTail](https://github.com/75lb/local-web-server/blob/master/doc/visualisation.md)\n* Back-end service mocking\n  * Prototype a web service, microservice, REST API etc.\n  * Mocks are defined with config (static), or code (dynamic).\n  * CORS-friendly, all origins allowed by default.\n* Proxy server\n  * Map local routes to remote servers. Removes CORS pain when consuming remote services.\n* HTTPS server\n  * HTTPS is strictly required by some modern techs (ServiceWorker, Media Capture and Streams etc.)\n* File sharing\n\n## Synopsis\nlocal-web-server is a simple command-line tool. To use it, from your project directory run `ws`.\n\n<pre><code>$ ws --help\n\n<strong>local-web-server</strong>\n\n  A simple web-server for productive front-end development.\n\n<strong>Synopsis</strong>\n\n  $ ws [&lt;server options&gt;]\n  $ ws --config\n  $ ws --help\n\n<strong>Server</strong>\n\n  -p, --port number              Web server port.\n  -d, --directory path           Root directory, defaults to the current directory.\n  -f, --log-format string        If a format is supplied an access log is written to stdout. If\n                                 not, a dynamic statistics view is displayed. Use a preset ('none',\n                                 'dev','combined', 'short', 'tiny' or 'logstalgia') or supply a\n                                 custom format (e.g. ':method -> :url').\n  -r, --rewrite expression ...   A list of URL rewrite rules. For each rule, separate the 'from'\n                                 and 'to' routes with '->'. Whitespace surrounded the routes is\n                                 ignored. E.g. '/from -> /to'.\n  -s, --spa file                 Path to a Single Page App, e.g. app.html.\n  -c, --compress                 Serve gzip-compressed resources, where applicable.\n  -b, --forbid path ...          A list of forbidden routes.\n  -n, --no-cache                 Disable etag-based caching -forces loading from disk each request.\n  --key file                     SSL key. Supply along with --cert to launch a https server.\n  --cert file                    SSL cert. Supply along with --key to launch a https server.\n  --https                        Enable HTTPS using a built-in key and cert, registered to the\n                                 domain 127.0.0.1.\n  --verbose                      Verbose output, useful for debugging.\n\n<strong>Misc</strong>\n\n  -h, --help    Print these usage instructions.\n  --config      Print the stored config.\n\n  Project home: https://github.com/75lb/local-web-server\n</code></pre>\n\n## Examples\n\nFor the examples below, we assume we're in a project directory looking like this:\n\n```sh\n.\n├── css\n│   └── style.css\n├── index.html\n└── package.json\n```\n\n**All paths/routes are specified using [express syntax](http://expressjs.com/guide/routing.html#route-paths)**. To run the example projects linked below, clone the project, move into the example directory specified, run `ws`.\n\n### Static site\n\nFire up your static site on the default port:\n```sh\n$ ws\nserving at http://localhost:8000\n```\n\n[Example](https://github.com/75lb/local-web-server/tree/master/example/simple).\n\n### Single Page Application\n\nYou're building a web app with client-side routing, so mark `index.html` as the SPA.\n```sh\n$ ws --spa index.html\n```\n\nBy default, typical SPA paths (e.g. `/user/1`, `/login`) would return `404 Not Found` as a file does not exist with that path. By marking `index.html` as the SPA you create this rule:\n\n*If a static file at the requested path exists (e.g. `/css/style.css`) then serve it, if it does not (e.g. `/login`) then serve the specified SPA and handle the route client-side.*\n\n[Example](https://github.com/75lb/local-web-server/tree/master/example/spa).\n\n### URL rewriting\n\nYour application requested `/css/style.css` but it's stored at `/build/css/style.css`. To avoid a 404 you need a rewrite rule:\n\n```sh\n$ ws --rewrite '/css/style.css -> /build/css/style.css'\n```\n\nOr, more generally (matching any stylesheet under `/css`):\n\n```sh\n$ ws --rewrite '/css/:stylesheet -> /build/css/:stylesheet'\n```\n\nWith a deep CSS directory structure it may be easier to mount the entire contents of `/build/css` to the `/css` path:\n\n```sh\n$ ws --rewrite '/css/* -> /build/css/$1'\n```\n\nthis rewrites `/css/a` as `/build/css/a`, `/css/a/b/c` as `/build/css/a/b/c` etc.\n\n#### Proxied requests\n\nIf the `to` URL contains a remote host, local-web-server will act as a proxy - fetching and responding with the remote resource.\n\nMount the npm registry locally:\n```sh\n$ ws --rewrite '/npm/* -> http://registry.npmjs.org/$1'\n```\n\nMap local requests for repo data to the Github API:\n```sh\n$ ws --rewrite '/:user/repos/:name -> https://api.github.com/repos/:user/:name'\n```\n\n[Example](https://github.com/75lb/local-web-server/tree/master/example/rewrite).\n\n### Mock Responses\n\nMocks give you full control over the response headers and body returned to the client. They can be used to return anything from a simple html string to a resourceful REST API. Typically, they're used to mock services but can be used for anything.\n\nIn the config, define an array called `mocks`. Each mock definition maps a <code>[route](http://expressjs.com/guide/routing.html#route-paths)</code> to a `response`. A simple home page:\n```json\n{\n  \"mocks\": [\n    {\n      \"route\": \"/\",\n      \"response\": {\n        \"body\": \"<h1>Welcome to the Mock Responses example</h1>\"\n      }\n    }\n  ]\n}\n```\n\nUnder the hood, the property values from the `response` object are written onto the underlying [koa response object](https://github.com/koajs/koa/blob/master/docs/api/response.md). You can set any valid koa response properies, for example [type](https://github.com/koajs/koa/blob/master/docs/api/response.md#responsetype-1):\n```json\n{\n  \"mocks\": [\n    {\n      \"route\": \"/\",\n      \"response\": {\n        \"type\": \"text/plain\",\n        \"body\": \"<h1>Welcome to the Mock Responses example</h1>\"\n      }\n    }\n  ]\n}\n```\n\n#### Conditional Response\n\nTo define a conditional response, set a `request` object on the mock definition. The `request` value acts as a query - the response defined will only be returned if each property of the `request` query matches. For example, return an XML response *only* if the request headers include `accept: application/xml`, else return 404 Not Found.\n\n```json\n{\n  \"mocks\": [\n    {\n      \"route\": \"/two\",\n      \"request\": { \"accepts\": \"xml\" },\n      \"response\": {\n        \"body\": \"<result id='2' name='whatever' />\"\n      }\n    }\n  ]\n}\n```\n\n#### Multiple Potential Responses\n\nTo specify multiple potential responses, set an array of mock definitions to the `responses` property. The first response with a matching request query will be sent. In this example, the client will get one of two responses depending on the request method:\n\n```json\n{\n  \"mocks\": [\n    {\n      \"route\": \"/three\",\n      \"responses\": [\n        {\n          \"request\": { \"method\": \"GET\" },\n          \"response\": {\n            \"body\": \"<h1>Mock response for 'GET' request on /three</h1>\"\n          }\n        },\n        {\n          \"request\": { \"method\": \"POST\" },\n          \"response\": {\n            \"status\": 400,\n            \"body\": { \"message\": \"That method is not allowed.\" }\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n#### Dynamic Response\n\nThe examples above all returned static data. To define a dynamic response, create a mock module. Specify its path in the `module` property:\n```json\n{\n  \"mocks\": [\n    {\n      \"route\": \"/four\",\n      \"module\": \"/mocks/stream-self.js\"\n    }\n  ]\n}\n```\n\nHere's what the `stream-self` module looks like. The module should export a mock definition (an object, or array of objects, each with a `response` and optional `request`). In this example, the module simply streams itself to the response but you could set `body` to *any* [valid value](https://github.com/koajs/koa/blob/master/docs/api/response.md#responsebody-1).\n```js\nconst fs = require('fs')\n\nmodule.exports = {\n  response: {\n    body: fs.createReadStream(__filename)\n  }\n}\n```\n\n#### Response function\n\nFor more power, define the response as a function. It will receive the [koa context](https://github.com/koajs/koa/blob/master/docs/api/context.md) as its first argument. Now you have full programmatic control over the response returned.\n```js\nmodule.exports = {\n  response: function (ctx) {\n    ctx.body = '<h1>I can do anything i want.</h1>'\n  }\n}\n```\n\nIf the route contains tokens, their values are passed to the response. For example, with this mock...\n```json\n{\n  \"mocks\": [\n    {\n      \"route\": \"/players/:id\",\n      \"module\": \"/mocks/players.js\"\n    }\n  ]\n}\n```\n\n...the `id` value is passed to the `response` function. For example, a path of `/players/10?name=Lionel` would pass `10` to the response function. Additional, the value `Lionel` would be available on `ctx.query.name`:\n```js\nmodule.exports = {\n  response: function (ctx, id) {\n    ctx.body = `<h1>id: ${id}, name: ${ctx.query.name}</h1>`\n  }\n}\n```\n\n#### RESTful Resource example\n\nHere's an example of a REST collection (users). We'll create two routes, one for actions on the resource collection, one for individual resource actions.\n\n```json\n{\n  \"mocks\": [\n    { \"route\": \"/users\", \"module\": \"/mocks/users.js\" },\n    { \"route\": \"/users/:id\", \"module\": \"/mocks/user.js\" }\n  ]\n}\n```\n\nDefine a module (`users.json`) defining seed data:\n\n```json\n[\n  { \"id\": 1, \"name\": \"Lloyd\", \"age\": 40, \"nationality\": \"English\" },\n  { \"id\": 2, \"name\": \"Mona\", \"age\": 34, \"nationality\": \"Palestinian\" },\n  { \"id\": 3, \"name\": \"Francesco\", \"age\": 24, \"nationality\": \"Italian\" }\n]\n```\n\nThe collection module:\n\n```js\nconst users = require('./users.json')\n\n/* responses for /users */\nconst mockResponses = [\n  /* Respond with 400 Bad Request for PUT and DELETE - inappropriate on a collection */\n  { request: { method: 'PUT' }, response: { status: 400 } },\n  { request: { method: 'DELETE' }, response: { status: 400 } },\n  {\n    /* for GET requests return a subset of data, optionally filtered on 'minAge' and 'nationality' */\n    request: { method: 'GET' },\n    response: function (ctx) {\n      ctx.body = users.filter(user => {\n        const meetsMinAge = (user.age || 1000) >= (Number(ctx.query.minAge) || 0)\n        const requiredNationality = user.nationality === (ctx.query.nationality || user.nationality)\n        return meetsMinAge && requiredNationality\n      })\n    }\n  },\n  {\n    /* for POST requests, create a new user and return the path to the new resource */\n    request: { method: 'POST' },\n    response: function (ctx) {\n      const newUser = ctx.request.body\n      users.push(newUser)\n      newUser.id = users.length\n      ctx.status = 201\n      ctx.response.set('Location', `/users/${newUser.id}`)\n    }\n  }\n]\n\nmodule.exports = mockResponses\n```\n\nThe individual resource module:\n\n```js\nconst users = require('./users.json')\n\n/* responses for /users/:id */\nconst mockResponses = [\n  /* don't support POST here */\n  { request: { method: 'POST' }, response: { status: 400 } },\n\n  /* for GET requests, return a particular user */\n  {\n    request: { method: 'GET' },\n    response: function (ctx, id) {\n      ctx.body = users.find(user => user.id === Number(id))\n    }\n  },\n\n  /* for PUT requests, update the record */\n  {\n    request: { method: 'PUT' },\n    response: function (ctx, id) {\n      const updatedUser = ctx.request.body\n      const existingUserIndex = users.findIndex(user => user.id === Number(id))\n      users.splice(existingUserIndex, 1, updatedUser)\n      ctx.status = 200\n    }\n  },\n\n  /* DELETE request: remove the record */\n  {\n    request: { method: 'DELETE' },\n    response: function (ctx, id) {\n      const existingUserIndex = users.findIndex(user => user.id === Number(id))\n      users.splice(existingUserIndex, 1)\n      ctx.status = 200\n    }\n  }\n]\n\nmodule.exports = mockResponses\n```\n\n[Example](https://github.com/75lb/local-web-server/tree/master/example/mock).\n\n### HTTPS Server\n\nSome modern techs (ServiceWorker, any `MediaDevices.getUserMedia()` request etc.) *must* be served from a secure origin (HTTPS). To launch an HTTPS server, supply a `--key` and `--cert` to local-web-server, for example:\n\n```\n$ ws --key localhost.key --cert localhost.crt\n```\n\nIf you don't have a key and certificate it's trivial to create them. You do not need third-party verification (Verisign etc.) for development purposes. To get the green padlock in the browser, the certificate..\n\n* must have a `Common Name` value matching the FQDN of the server\n* must be verified by a Certificate Authority (but we can overrule this - see below)\n\nFirst create a certificate:\n\n1. Install openssl.\n\n  `$ brew install openssl`\n\n2. Generate a RSA private key.\n\n  `$ openssl genrsa -des3 -passout pass:x -out ws.pass.key 2048`\n\n3. Create RSA key.\n\n  ```\n  $ openssl rsa -passin pass:x -in ws.pass.key -out ws.key\n  ```\n\n4. Create certificate request. The command below will ask a series of questions about the certificate owner. The most imporant answer to give is for `Common Name`, you can accept the default values for the others.  **Important**: you **must** input your server's correct FQDN (`dev-server.local`, `laptop.home` etc.) into the `Common Name` field. The cert is only valid for the domain specified here. You can find out your computers host name by running the command `hostname`. For example, mine is `mba3.home`.\n\n  `$ openssl req -new -key ws.key -out ws.csr`\n\n5. Generate self-signed certificate.\n\n  `$ openssl x509 -req -days 365 -in ws.csr -signkey ws.key -out ws.crt`\n\n6. Clean up files we're finished with\n\n  `$ rm ws.pass.key ws.csr`\n\n7. Launch HTTPS server. In iTerm, control-click the first URL (with the hostname matching `Common Name`) to launch your browser.\n\n  ```\n  $ ws --key ws.key --cert ws.crt\n  serving at https://mba3.home:8010, https://127.0.0.1:8010, https://192.168.1.203:8010\n  ```\n\nChrome and Firefox will still complain your certificate has not been verified by a Certificate Authority. Firefox will offer you an `Add an exception` option, allowing you to ignore the warning and manually mark the certificate as trusted. In Chrome on Mac, you can manually trust the certificate another way:\n\n1. Open Keychain\n2. Click File -> Import. Select the `.crt` file you created.\n3. In the `Certificates` category, double-click the cert you imported.\n4. In the `trust` section, underneath `when using this certificate`, select `Always Trust`.\n\nNow you have a valid, trusted certificate for development.\n\n#### Built-in certificate\nAs a quick win, you can run `ws` with the `https` flag. This will launch an HTTPS server using a [built-in certificate](https://github.com/75lb/local-web-server/tree/master/ssl) registered to the domain 127.0.0.1.\n\n### Stored config\n\nUse the same options every time? Persist then to `package.json`:\n```json\n{\n  \"name\": \"example\",\n  \"version\": \"1.0.0\",\n  \"local-web-server\": {\n    \"port\": 8100,\n    \"forbid\": \"*.json\"\n  }\n}\n```\n\nor `.local-web-server.json`\n```json\n{\n  \"port\": 8100,\n  \"forbid\": \"*.json\"\n}\n```\n\nlocal-web-server will merge and use all config found, searching from the current directory upward. In the case both `package.json` and `.local-web-server.json` config is found in the same directory, `.local-web-server.json` will take precedence. Options set on the command line take precedence over all.\n\nTo inspect stored config, run:\n```sh\n$ ws --config\n```\n\n### Logging\nBy default, local-web-server outputs a simple, dynamic statistics view. To see traditional web server logs, use `--log-format`:\n\n```sh\n$ ws --log-format combined\nserving at http://localhost:8000\n::1 - - [16/Nov/2015:11:16:52 +0000] \"GET / HTTP/1.1\" 200 12290 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2562.0 Safari/537.36\"\n```\n\nThe format value supplied is passed directly to [morgan](https://github.com/expressjs/morgan). The exception is `--log-format none` which disables all output.\n\n### Access Control\n\nBy default, access to all files is allowed (including dot files). Use `--forbid` to establish a blacklist:\n```sh\n$ ws --forbid '*.json' '*.yml'\nserving at http://localhost:8000\n```\n\n[Example](https://github.com/75lb/local-web-server/tree/master/example/forbid).\n\n### Other usage\n\n#### Debugging\n\nPrints information about loaded middleware, arguments, remote proxy fetches etc.\n```sh\n$ ws --verbose\n```\n\n#### Compression\n\nServe gzip-compressed resources, where applicable\n```sh\n$ ws --compress\n```\n\n#### Disable caching\n\nDisable etag response headers, forcing resources to be served in full every time.\n```sh\n$ ws --no-cache\n```\n\n#### mime-types\nYou can set additional mime-type/extension mappings, or override the defaults by setting a `mime` value in the stored config. This value is passed directly to [mime.define()](https://github.com/broofa/node-mime#mimedefine). Example:\n\n```json\n{\n  \"mime\": {\n    \"text/plain\": [ \"php\", \"pl\" ]\n  }\n}\n```\n\n[Example](https://github.com/75lb/local-web-server/tree/master/example/mime-override).\n\n#### Log Visualisation\nInstructions for how to visualise log output using goaccess, logstalgia or gltail [here](https://github.com/75lb/local-web-server/blob/master/doc/visualisation.md).\n\n## Install\nEnsure [node.js](http://nodejs.org) is installed first. Linux/Mac users may need to run the following commands with `sudo`.\n\n```sh\n$ npm install -g local-web-server\n```\n\nThis will install the `ws` tool globally. To see the available options, run:\n```sh\n$ ws --help\n```\n\n## Distribute with your project\nThe standard convention with client-server applications is to add an `npm start` command to launch the server component.\n\n1\\. Install the server as a dev dependency\n\n```sh\n$ npm install local-web-server --save-dev\n```\n\n2\\. Add a `start` command to your `package.json`:\n\n```json\n{\n  \"name\": \"example\",\n  \"version\": \"1.0.0\",\n  \"local-web-server\": {\n    \"port\": 8100,\n    \"forbid\": \"*.json\"\n  },\n  \"scripts\": {\n    \"start\": \"ws\"\n  }\n}\n```\n\n3\\. Document how to build and launch your site\n\n```sh\n$ npm install\n$ npm start\nserving at http://localhost:8100\n```\n\n## API Reference\n\n\n* [local-web-server](#module_local-web-server)\n    * [localWebServer([options])](#exp_module_local-web-server--localWebServer) ⇒ <code>[KoaApplication](https://github.com/koajs/koa/blob/master/docs/api/index.md#application)</code> ⏏\n        * [~rewriteRule](#module_local-web-server--localWebServer..rewriteRule)\n\n<a name=\"exp_module_local-web-server--localWebServer\"></a>\n### localWebServer([options]) ⇒ <code>[KoaApplication](https://github.com/koajs/koa/blob/master/docs/api/index.md#application)</code> ⏏\nReturns a Koa application you can launch or mix into an existing app.\n\n**Kind**: Exported function  \n**Params**\n\n- [options] <code>object</code> - options\n    - [.static] <code>object</code> - koa-static config\n        - [.root] <code>string</code> <code> = &quot;.&quot;</code> - root directory\n        - [.options] <code>string</code> - [options](https://github.com/koajs/static#options)\n    - [.serveIndex] <code>object</code> - koa-serve-index config\n        - [.path] <code>string</code> <code> = &quot;.&quot;</code> - root directory\n        - [.options] <code>string</code> - [options](https://github.com/expressjs/serve-index#options)\n    - [.forbid] <code>Array.&lt;string&gt;</code> - A list of forbidden routes, each route being an [express route-path](http://expressjs.com/guide/routing.html#route-paths).\n    - [.spa] <code>string</code> - specify an SPA file to catch requests for everything but static assets.\n    - [.log] <code>object</code> - [morgan](https://github.com/expressjs/morgan) config\n        - [.format] <code>string</code> - [log format](https://github.com/expressjs/morgan#predefined-formats)\n        - [.options] <code>object</code> - [options](https://github.com/expressjs/morgan#options)\n    - [.compress] <code>boolean</code> - Serve gzip-compressed resources, where applicable\n    - [.mime] <code>object</code> - A list of mime-type overrides, passed directly to [mime.define()](https://github.com/broofa/node-mime#mimedefine)\n    - [.rewrite] <code>[Array.&lt;rewriteRule&gt;](#module_local-web-server--localWebServer..rewriteRule)</code> - One or more rewrite rules\n    - [.verbose] <code>boolean</code> - Print detailed output, useful for debugging\n\n**Example**  \n```js\nconst localWebServer = require('local-web-server')\nlocalWebServer().listen(8000)\n```\n<a name=\"module_local-web-server--localWebServer..rewriteRule\"></a>\n#### localWebServer~rewriteRule\nThe `from` and `to` routes are specified using [express route-paths](http://expressjs.com/guide/routing.html#route-paths)\n\n**Kind**: inner typedef of <code>[localWebServer](#exp_module_local-web-server--localWebServer)</code>  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| from | <code>string</code> | request route |\n| to | <code>string</code> | target route |\n\n**Example**  \n```json\n{\n  \"rewrite\": [\n    { \"from\": \"/css/*\", \"to\": \"/build/styles/$1\" },\n    { \"from\": \"/npm/*\", \"to\": \"http://registry.npmjs.org/$1\" },\n    { \"from\": \"/:user/repos/:name\", \"to\": \"https://api.github.com/repos/:user/:name\" }\n  ]\n}\n```\n\n* * *\n\n&copy; 2013-16 Lloyd Brookes <75pound@gmail.com>. Documented by [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/75lb/local-web-server/issues"
  },
  "_id": "local-web-server@1.2.6",
  "dist": {
    "shasum": "8cd496f7d821b56d349c8277d63303c0f4ef2ee5"
  },
  "_from": "local-web-server@",
  "_resolved": "https://registry.npmjs.org/local-web-server/-/local-web-server-1.2.6.tgz"
}
